工作区：写代码
  |
git add
  |
暂存区：临时存储
  |
git commit
  |
本地库：历史版本

代码托管中心：维护远程库
	局域网下：gitlab服务器
	外网下：github 码云

本地库和远程库：
	团队内部协作：push / clone / pull
	跨团队协作：fork / pull request / merge / pull


本地库初始化：
	命令：git init 
	效果：创建.git目录
	注意：目录中存放本地库相关的子目录和文件，不要删除和修改

设置签名：
	形式：
		用户名：
		email地址：
	作用：区分不同开发人员身份
	辨析：签名与登录远程库（代码托管中心）的账号，密码无关
	命令：
		项目级别/仓库级别：仅在当前本地库范围内有效
			git config user.name 
			git config user.email
			信息保存位置：./git/config文件
		系统用户级别：登录当前操作系统的用户范围
			git config --global user.name
			git config --global user.email
			信息保存位置：~/.gitconfig文件
		级别优先级：
			就近原则：项目级别优先于系统用户级别，二者都有时采用项目级别签名
			如果只有系统用户级别签名，就以系统用户级别签名为准
			二者都没有不允许



状态查看操作：
	git status
	查看工作区，暂存区的状态
添加操作：
	git add[file name]
	将工作区的“新建/修改”添加到暂存区
提交操作：
	git commit -m "commit message" [file name]
	将暂存区内容提交到本地库

查看历史纪录：
	git log
		多屏显示控制方式：
			空格下翻页
			b上翻页
			q退出
	git log --pretty=oneline
	git log --oneline
	git relog
		HEAD@{移动到当前版本需要多少步}

前进后退：
	基于索引值操作
		git reset --hard [局部索引值]
	使用^符号：只能往后退
		git reset --hard HEAD^
		注：一个^表示后退一步，n个表示后退n步
	使用~符号
		git reset --hard HEAD~n
		注：表示后退n步

reset命令三个参数的对比：
	--soft 
		仅在本地库移动HEAD指针
				暂存区	工作区
		本地库

	--mixed
		在本地库移动HEAD指针
		重置暂存区
						工作区
		本地库	暂存区 

	--hard
		在本地库移动HEAD指针
		重置暂存区
		重置工作区
		
		本地库	暂存区	工作区

删除文件并找回：
	前提：删除前，文件存在时的状态提交到本地库
	操作：git reset --hard [指针位置]
		删除操作已提交到本地库：指针位置指向历史纪录
		删除操作未提交到本地库：指针位置使用HEAD

比较文件差异：
	git diff [文件名]
		将工作区的文件和暂存区进行比较
	git diff [本地库历史版本][文件名]
		将工作区的文件和本地库历史纪录比较
	不带文件名比较多个文件


分支：在版本控制过程中，使用多条线同时推进多个任务
优点：
	同时并行推进多个功能开发，提高开发效率
	各个分支在开发过程中，若某个分支开发失败，不会对其他分支有任何影响。失败分支删除重新开始即可

创建分支：
	git branch[分支名]
查看分支：
	git branch -v
切换分支：
	git checkout[分支名]
合并分支：
	第一步：切换到接受修改的分支(被合并，增加新内容)上
		git checkout [被合并分支名]
	第二步：执行merge命令
		git merge [有新内容分支名]
解决冲突：
	冲突表现：
		<<<<<<<<<<<<<<
		当前分支内容
		==============
		另一分支内容
		>>>>>>>>>>>>>>
	冲突的解决：
		第一步：编辑文件，删除特殊符号
		第二步：修改文件，保存退出
		第三步：git add [文件名]
		第四步：git commit -m "日志信息"
			注：此时commit一定不能带具体文件名

Git基本原理：
	哈希：SHA-1
	保存版本机制：快照流
	分支管理机制：。。。。。


github
创建远程库别名：
	git remote add [别名] 远程地址
	git remote -v 查看当前所有远程地址别名

推送操作：
	git push [别名] [分支]

克隆操作：
	git clone 远程地址
	效果：
		完整的把远程库下载到本地
		创建远程地址别名
		初始化本地库

拉取操作：
	pull=fetch_merge
    1.内容复杂时
		git fetch [远程库地址别名] [远程分支名]
		//git checkout [远程库地址别名/远程分支名]
		git merge [远程库地址别名/远程分支名]
	2.内容简单时
		git pull [远程库地址别名] [远程分支名]

	理解git本地分支以及远程分支：
		1.创建本地分支，如何关联远程分支
			git push --set-upstream origin branch_name
		2.远程有分支，本地没有分支，ruhezhuizong
			git checkout --track origin/branch_name


解决冲突：
	要点：
		如果不是基于Github远程库的最新版所做的修改，不能推送，必须先拉取
		拉取后如果进入冲突状态，要按照“分支冲突解决”操作解决即可

跨团队协作：
	fork
	本地修改，然后推送到远程
	Pull Request
	New pull request
	Create pull request


SSH登录：
	进入当前用户家目录
		cd ~
	删除.ssh目录
		rm -rvf .ssh
	运行命令生成ssh密钥目录
		ssh-keygen -t rsa -C email [注：-C参数大写]
	进入.ssh目录查看文件列表
		cd .ssh
		ls -LF
	查看id_rsa.pub文件内容
		cat id_rsa.pub
	复制id_rsa.pub文件内容，登录github，点击用户头像->Settings->SSH and GPG keys
	New SSH Key
	输入复制的密钥信息
	回到本地创建远程地址别名
		git remote add [别名] [远程库地址(SSH)]


git工作流
概念：在项目开发过程中使用git的方法

集中式工作流：
	以中央仓库作为项目所有修改的单点实体，所有修改都提交到Master分支上

GitFlow工作流：
	通过为功能开发，发布准备和维护设立了独立的分支，让发布迭代过程更流畅。严格的分支模型也为大型项目提供一些非常必要的结构

Forking工作流：
	在GitFlow基础上，充分利用Git的Fork和pull request的功能以达到代码审核的目的。更适合安全可靠的管理大团队的开发者，而且能接受不信任贡献者的提交


GitFlow分支种类：

	主干分支 master
		主要负责管理正在运行的生产环境代码，永远保持与正在运行的生产环境一致

	开发分支 develop
		主要负责管理正在开发过程中的代码，一般情况下应该是最新的代码

	bug修理分支 hotfix
		主要负责管理生产环境下出现的紧急修复代码。从主干分支分出，修理完毕并测试上线后，并回主干分支。并回后，视情况可以删除该分支

	准生产分支(预发布分支) release
		较大的版本上线前，会从开发分支分出准生产分支，进行最后阶段的集成测试。该版本上线后，会合并到主干分支。生产环境运行一段时间较稳定后可以视情况删除

	功能分支 feature
		为了不影响较短周期的开发工作，一般把中长期开发模块从开发分支中独立出来，完成后会合并到主干分支


Gitlab服务器搭建过程：
。。。。

gitlab服务操作：
	初始化配置gitlab
		gitlab-ctl reconfigure
	启动gitlab服务
		gitlab-ctl start
	停止gitlab服务
		gitlab-ctl stop

浏览器访问：
	访问linux服务器IP地址即可，若想访问EXTERNAL_URL指定的域名还需要配置域名服务器或本地hosts文件
	初次登录时需要为gitlab的root用户设置密码
	注：应该会需要停止防火墙服务：service firewalld stop


