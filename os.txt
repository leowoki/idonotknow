1.。。
windows:基于MS-DOS

linux/unix；。。。。。

mac:基于UNIX内核的图形化操作系统

操作系统与普通软件：
    无操作系统，计算机能运行程序，如BIOS
    无操作系统，普通用户不能使用

基本功能：
    提供操作界面
    控制程序运行
    管理系统资源
    配置系统参数
    监控系统状态
    工具软件集合

操作系统的功能一：进程管理（CPU管理）
	进程控制：创建。暂停，唤醒，撤销
	进程调度：调度策略。优先级
	进程通信：进程间通信
操作系统的功能二：内存管理
	内存分配
	内存共享
	内存保护
	虚拟内存
操作系统的功能三：设备管理功能
	设备的分配和调度
	设备无关性作
	设备传输控制
	设备驱动
操作系统的功能四：文件管理
	存储空间管理
	文件的操作
	目录的操作
	文件和目录的存取权限管理 


操作系统定义
操作系统是一个大型系统程序
	提供用户接口，方便用户控制计算机
	负责为应用程序分配和调度软硬件资源，并控制与协调应用程序并发活动，帮助用户存取和保护信息


操作系统地位：

		各种各样应用程序                ---------应用程序
	调试程序	装入程序	编辑程序---------系统程序
	编译程序	汇编程序	装配程序
			操作系统
			机器语言         -----------------硬件部分
			微程序
			裸机

计算机硬件发展历史：用户需求提升和硬件技术进步
	电子管
	晶体管
	集成电路
	大规模集成电路

操作系统发展阶段：
	手工操作(无操作系统)
	单道批处理系统
	多道批处理系统
	分时系统



中断技术：
	CPU收到外部信号(中断信号)，停止当前工作，转去处理外部事件，处理完毕后回到原来中断处(断点)继续原来工作

通道技术：
	专门处理外设与内存之间的数据传输的处理机制

分时技术：
	主机以很短的“时间片”为单位，把CPU轮流分配给每个终端使用，直到全部作业被运行完
	等待周期=时间片*终端数量

分时系统特点：
	多路调制性：多用户联机使用一台计算机
	独占性：用户感觉独占计算机
	交互性：及时向应用户请求

分时操作系统衍化：
微机操作系统
	良好层次结构：BIOS把操作系统和硬件分隔
多处理机操作系统
网络操作系统
	普通操作系统+网络通信+网络服务
	功能：透明存取，存取控制
实时操作系统
	强调作业完成时限
嵌入式操作系统
	约等于实时系统操作
	软硬件可裁剪，软硬件一体化的系统


适合学习的小型开源操作系统：
	minix os: http://www.minix3.org/
	linux1.0



2.。。。
操作系统逻辑结构：
逻辑结构
	OS的设计和实现思路
逻辑结构种类
	整体式结构
		以模块为基本单位构建
		特点
			模块设计，编码，调试独立
			模块调用自由
			模块通信多以全局变量形式完成
		缺点
			信息传递随意，维护和更新困难
	层次式结构
		所有功能模块按照调用次序排成若干层，相邻层间只有单项依赖或单向调用
		分层原则
			硬件相关--最底层
			外部特性--最外层
			中间层--调用次序或消息传递顺序
			共性的服务--较低层
			活跃功能--较低层
		特点
			结构清晰，避免循环调用
			整体问题局部化，系统的正确性容易保证
			有利于操作系统维护，扩充，移植
	微内核结构(客户/服务器结构，Clinet/Server)
		操作系统=微内核+核外服务
		微内核
			足够小，提供OS最基本的核心功能和服务
				实现与硬件紧密相关的处理
				实现一些较基本的功能
				负责苦湖和服务器间的通信
		核外服务器
			完成OS绝大部分服务功能，等待应用程序提出请求
				由若干服务器或进程共同构成，EG：进程/线程服务器，虚存服务器，设备管理服务器等，以进程形式在用户态


支持操作系统的最基本硬件结构
	CPU
		CPU态(Mode)
			CPU的工作状态
			对资源和指令(特权指令)使用权限的描述
	
		态的分类
			核态(Kernel mode)
				能够访问所有资源和执行所有命令
				管理程序/OS内核
			用户态(User mode 目态)
				仅能访问部分资源，其他资源受限
				用户程序
			管态(Supervisor mode)
				介于核态和用户态之间
		
		用户态和核态之间的转换
			用户态向核态转换
				用户请求OS提供服务
				发生中断
				用户进程产生错误(内部中断)
				用户态企图执行特权指令
			核态向用户态转换情形
				一般是执行中断返回：IRET

		硬件和OS对CPU的观察
			硬件按“态”来区分CPU的状态
			OS按“进程”来区分CPU的状态

		Inter CPU的态
			Ring0~Ring3(Ring0最核心)
			程序段A访问程序段B时进行权限检查(态)
			程序段：请求特权级，RPL
				Requested Privilege Level
				RPL=0..3
			程序段：描述符特权级，DPL
				Descriptor Privilege Level
				DPL=0..3
		windows：Ring0和Ring3之间的通信
			DeviceIoControl(kernel32.dll)

	存储器
		存储程序和数据的部件
		
		分类
			按存储器(半导体存储器)读写方式
				RAM
				ROM
			按存储元的材料
				半导体存储器(常作主存)
				磁存储器(磁带，磁盘)
				光存储器(光盘)
			按与CPU的联系
				主存：直接和CPU交换信息
				辅存：不能直接和CPU交互信息

			理想存储体系：速度快，容量大，成本低
			实际存储体系：
				寄存器
				高速缓存(CACHE)
				主存
				辅存

			分级存储系统工作原理
				CPU读取指令或数据时的访问顺序
					访问缓存(命中，HIT)
					访问内存(没有命中，MISS)
					访问辅存(缺页，PAGE_FAULT)			
				
	中断
		指CPU对突发的外部事件的反应机制或过程
		CPU收到外部信号(中断信号)，停止当前工作，转去处理外部事件，处理完毕后回到原来中断处(断点)继续原来工作
		
		目的：实现并发活动
			  实现实时处理
			  故障自动处理

		中断源
			引起系统中断的事件
		中断类型
			强迫性中断和自愿中断：
				强迫性中断：程序没有预期，例：I/O，外部中断
				自愿中断：程序有预期，例：执行访管指令
			外中断(中断)和内中断(俘获)：
				外中断：由CPU外部事件引起，例：I/O，外部事件
				内中断：有CPU内部事件引起，例：访管中断，程序中断
			外中断：不可屏蔽中断和可屏蔽中断
				不可屏蔽中断：中断的原因很紧要，CPU必须响应
				可屏蔽中断：中断的原因不很紧要，CPU可以不响应
		
		断点
			程序中断的地方，将要执行的下一指令的地址
			CS:IP
		现场
			程序正确运行所依赖的信息集合
			相关寄存器
		现场的两个处理过程：
			现场的保护：进入中断服务程序之前，栈
			现场的恢复：退出中断服务程序之后，栈

		中断响应过程：
			识别中断源
			保护断点和现场
			装入中断服务程序的入口地址(CS:IP)
			进入中断服务程序
			恢复现场和断点
			中断返回：IRET

		响应实质：
			交换指令执行地址
			交换CPU的态
			工作：现场的保护和恢复，参数传递(通信)

	时钟
		........


3.。。。

操作系统启动过程
BIOS和主引导记录MBR
	计算机工作模式：实模式和保护模式
		实模式(实地址模式，REAL MODE)
			程序按照8086寻址方法访问0h--FFFFFh(1M)空间
			寻址方式：物理地址(20位)=段地址(16位)：偏移地址(16位)
			CPU单任务运行

			前640K[00000--9FFFF]：基本内存
			中128K[A0000--BFFFF]：显卡显存
			后256K[C0000--FFFFF]：BIOS

			C0000--C7FFF：显卡BIOS
			C8000--CBFFF：IDE控制器BIOS
			F0000--FFFFF：最后64KB，系统BIOS

		保护模式(内存保护模式，PROTECT MODE)
			寻址方式：段(32位)和偏移量(32位)，寻址4GB空间
				段属性：起始地址，存取属性，权限级别。。
			段页式寻址机制(段，页)
			虚拟地址，进程，封闭空间
			应用程序和操作系统的运行环境被保护
			CPU支持多任务

		系统BIOS
			Basic I/O System(Firmware,固件：以硬件方式存在的软件或软件)
			基本输入/输出系统
			位置：F0000--FFFFF
			功能：
				系统启动配置
					CMOS设置
				基本的设备I/O服务
					BIOS使用的中断类型号为10H~1FH
				系统的加电自检和启动
					加电自检POST：
						Power On Slef-Test
						初始化基本硬件
							CPU，内存，显卡。。。
						自检正常不提示，错误则通过喇叭提示
					按下PowerOn或者Reset键执行第一条指令
						执行FFFF0处指令：JUMP POST ;POST位于系统BOIS内部

		POST之后
			查找显卡BIOS，调用显卡BIOS
			依次查找其他设备执行相应设备的BIOS
			显示启动画面
			从硬盘/软盘/光驱/U盘读入OS
				MBR
					存放在硬盘/软盘的首扇区
					存放和OS启动相关信息(Main Boot Record)
					512BYTES
					结束：0xAA55h

					分区启动扇区：BootLoader，PBR
					主启动扇区：完成OS加载或启动管理功能。
						提供菜单：让用户选择不同启动项，实现多重启动
						加载核心文件：直接指向可启动区加载操作系统
						跳转：将启动管理功能转交给其他loder
			OS启动后，由OS接管计算机
操作系统启动过程
	从加电到用户工作环境准备好的过程
		初始引导
			把OS核心装入内存并使之开始工作接管计算机系统
		核心初始化
			OS内核初始化系统的核心数据
		系统初始化
			为用户使用系统作准备，使系统处于待命状态
	
操作系统生成
	满足特定硬件环境和用户需求，组装和构建操作系统过程

	主要步骤：
		根据硬件环境/用户要求配置功能模块和构造参数
		构建OS镜像
	前提：
		操作系统由可拆装模块构成
		有交互式配置工具
		有映像构建工具
	
	linux操作系统生成：
		获取LINUX内核源代码
			http://www.kernel.org/
			cd /usr/src
			tar zxvf linux-2.6.38-12.tar.gz
		选择和启动内核配置程序
			cd /usr/src/linux-2.6
			//make config(文本界面)
			//make xconfig(图形窗口模式，xWindows使用)
			make menuconfig(文本选择界面，字符终端)
		根据需求配置内核模式和参数
			。。。。。
		重新编译新内核
			make dep 生成依赖dependency信息
			make clean 清除旧的编译结果
			make bzImage ./arch/i386/boot/bzImage
		编译和安装模块
			make modules
			make modules install 模块被编译且安装到/usr/lib<内核版本号>目录下
		启动新内核(具体过程与版本有关)
			cp bzImage /boot/bzImage
			配置/boot/grub/grub.conf

用户界面
	定义：OS提供给用户控制计算机的机制，又称用户接口
	分类：
		操作界面：
			图形用户接口：窗口，图标，菜单，按钮，鼠标(消息，事件)
			键盘命令(cammand)：在控制台环境下接受键盘输入的命令
							   类型：普通命令，批处理命令，shell
							   批处理：
									普通命令的集合，批执行，由command解释执行
									支持变量替换，条件，转移，循环，注释等简单语法
									*.BAT
								shell：
									操作系统与用户交互的界面
									表现为通过控制台执行用户命令三方式
									本身不执行，仅仅组织和管理命令

									脚本编成：通过类似程序的方式执行具有一定逻辑顺序的命令序列完成较复杂的功能和人机交互
									脚本程序保存在文本文件中
									脚本程序是shell命令语句的集合
									shell脚本程序由shell环境解释执行
									执行shell脚本文件需要具有可执行属性(x)
										chmod +x myscript.sh
									运行脚本方法：
										直接运行(用缺省版本的shell运行脚本程序)
										使用特定版本的shell执行脚本
										在脚本文件首行指定shell
		系统调用：操作系统内核为应用程序提供的服务/函数
			特点：
				一般涉及核心资源或硬件的操作
				运行与核态(内核空间)
				每个系统调用具有唯一编号：ID
				调用过程会产生中断，自愿中断
			隐式系统调用：
				类似API函数
				在高级语言中使用
				包含“INT 80h”中断指令，执行相应的系统调用





